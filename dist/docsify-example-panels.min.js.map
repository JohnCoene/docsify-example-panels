{"version":3,"file":"docsify-example-panels.min.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/js/index.js"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","// Dependencies\n// =============================================================================\nimport { version as pkgVersion } from '../../package.json';\nimport '../scss/style.scss';\n\n\n// Constants and variables\n// =============================================================================\nconst commentReplaceMark = 'panels:replace';\n\nconst classNames = {\n    panelBlock      : 'docsify-example-panels',\n};\nconst regex = {\n    // Matches markdown code blocks (inline and multi-line)\n    // Example: ```text```\n    codeMarkup: /(```*?```)/gm,\n\n    // Matches replacement comments\n    // 0: Match\n    // 1: Replacement HTML\n    commentReplaceMarkup: new RegExp(`<!-- ${commentReplaceMark} (.*) -->`),\n    // Matches panels set by start/end comment\n    // 0: Match\n    // 1: Indent\n    // 2: Start comment: <!-- panels:start -->\n    // 3: divs and content\n    // 4: End comment: <!-- panels:end -->\n    panelBlockMarkup: /[\\r\\n]*(\\s*)(<!-+\\s+panels:\\s*?start\\s+-+>)[\\r\\n]+([\\s|\\S]*?)[\\r\\n\\s]+(<!-+\\s+panels:\\s*?end\\s+-+>)/m,\n\n    // Matches divs and content\n    // 0: Match\n    // 1: Label: <!-- div:class -->\n    // 2: Content\n    panelMarkup: /<!-+\\s+div:\\s*(.*)\\s+-+>[\\r\\n]+([\\s\\S]*?)[\\r\\n]+((?=<!-+\\s+div:?)|(?=<!-+\\s+panels?))/m,\n};\n\n\n// Functions\n// =============================================================================\n/**\n * Converts tab content into \"stage 1\" markup. Stage 1 markup contains temporary\n * comments which are replaced with HTML during Stage 2. This approach allows\n * all markdown to be converted to HTML before tab-specific HTML is added.\n *\n * @param {string} content\n * @returns {string}\n */\nfunction renderPanelsStage1(content) {\n    const codeBlockMatch   = content.match(regex.codeMarkup) || [];\n    const codeBlockMarkers = codeBlockMatch.map((item, i) => {\n        const codeMarker = `<!-- ${commentReplaceMark} CODEBLOCK${i} -->`;\n\n        // Replace code block with marker to ensure tab markup within code\n        // blocks is not processed. These markers are replaced with their\n        // associated code blocs after tabs have been processed.\n        content = content.replace(item, codeMarker);\n\n        return codeMarker;\n    });\n\n    let panelBlockMatch; // eslint-disable-line no-unused-vars\n    let panelMatch; // eslint-disable-line no-unused-vars\n\n    // Process each tab set\n    while ((panelBlockMatch = regex.panelBlockMarkup.exec(content)) !== null) {\n        let panelBlock            = panelBlockMatch[0];\n        let panelStartReplacement = '';\n        let panelEndReplacement   = '';\n\n        const hasPanel = regex.panelMarkup.test(panelBlock);\n        const panelBlockIndent = panelBlockMatch[1];\n        const panelBlockStart  = panelBlockMatch[2];\n        const panelBlockEnd    = panelBlockMatch[4];\n\n        if (hasPanel) {\n            panelStartReplacement = `<!-- ${commentReplaceMark} <div class=\"${[classNames.panelBlock].join(' ')}\"> -->`;\n            panelEndReplacement = `\\n${panelBlockIndent}<!-- ${commentReplaceMark} </div> -->`;\n\n            // Process each panel\n            while ((panelMatch = (regex.panelMarkup.exec(panelBlock))) !== null) {\n                const panelName   = (panelMatch[1]).trim().toLowerCase();\n                const panelContent = (panelMatch[2]).trim();\n\n                panelBlock = panelBlock.replace(panelMatch[0], [\n                    `\\n${panelBlockIndent}<!-- ${commentReplaceMark} <div class=\"${[classNames.panelBlock, panelName].join(' ')}\"> -->`,\n                    `\\n\\n${panelBlockIndent}${panelContent}`,\n                    `\\n\\n${panelBlockIndent}<!-- ${commentReplaceMark} </div> -->`\n                ].join(''));\n            }\n\n        }\n\n        panelBlock = panelBlock.replace(panelBlockStart, panelStartReplacement);\n        panelBlock = panelBlock.replace(panelBlockEnd, panelEndReplacement);\n        content = content.replace(panelBlockMatch[0], panelBlock);\n    }\n\n\n    // Restore code blocks\n    codeBlockMarkers.forEach((item, i) => {\n        content = content.replace(item, codeBlockMatch[i]);\n    });\n\n    return content;\n}\n\n/**\n * Converts \"stage 1\" markup into final markup by replacing temporary comments\n * with HTML.\n *\n * @param {string} html\n * @returns {string}\n*/\nfunction renderPanelsStage2(html) {\n    let tabReplaceMatch; // eslint-disable-line no-unused-vars\n\n    while ((tabReplaceMatch = regex.commentReplaceMarkup.exec(html)) !== null) {\n        const tabComment     = tabReplaceMatch[0];\n        const tabReplacement = tabReplaceMatch[1] || '';\n\n        html = html.replace(tabComment, tabReplacement);\n    }\n\n    return html;\n}\n\n\n\n\n// Plugin\n// =============================================================================\nfunction docsifyPanels(hook, vm) {\n    let hasPanels =false;\n    hook.beforeEach(function(content) {\n        hasPanels = regex.panelBlockMarkup.test(content);\n\n        if (hasPanels) {\n            content = renderPanelsStage1(content);\n        }\n\n        return content;\n    });\n\n    hook.afterEach(function(html, next) {\n        if (hasPanels) {\n            html = renderPanelsStage2(html);\n        }\n\n        next(html);\n    });\n}\n\n\nif (window) {\n    window.$docsify = window.$docsify || {};\n\n    // Add config object\n    window.$docsify.panels = window.$docsify.panels || {};\n\n    // Add plugin data\n    window.$docsify.panels.version = pkgVersion;\n\n    // Init plugin\n    window.$docsify.plugins = [].concat(\n        docsifyPanels,\n        (window.$docsify.plugins || [])\n    );\n}\n"],"names":["css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","commentReplaceMark","classNames","panelBlock","regex","codeMarkup","commentReplaceMarkup","RegExp","panelBlockMarkup","panelMarkup","window","$docsify","panels","version","plugins","concat","hook","vm","hasPanels","beforeEach","content","test","panelBlockMatch","panelMatch","codeBlockMatch","match","codeBlockMarkers","map","item","i","codeMarker","replace","exec","panelStartReplacement","panelEndReplacement","hasPanel","panelBlockIndent","panelBlockStart","panelBlockEnd","join","panelName","trim","toLowerCase","panelContent","forEach","renderPanelsStage1","afterEach","html","next","tabReplaceMatch","tabComment","tabReplacement","renderPanelsStage2"],"mappings":";;;;;;;0BAAA,SAAqBA,EAAKC,QACX,IAARA,IAAiBA,EAAM,IAC5B,IAAIC,EAAWD,EAAIC,SAEnB,GAAKF,GAA2B,oBAAbG,SAAnB,CAEA,IAAIC,EAAOD,SAASC,MAAQD,SAASE,qBAAqB,QAAQ,GAC9DC,EAAQH,SAASI,cAAc,SACnCD,EAAME,KAAO,WAEI,QAAbN,GACEE,EAAKK,WACPL,EAAKM,aAAaJ,EAAOF,EAAKK,YAKhCL,EAAKO,YAAYL,GAGfA,EAAMM,WACRN,EAAMM,WAAWC,QAAUb,EAE3BM,EAAMK,YAAYR,SAASW,eAAed,+tECf9C,IAAMe,EAAqB,iBAErBC,EAAa,CACfC,WAAkB,0BAEhBC,EAAQ,CAGVC,WAAY,eAKZC,qBAAsB,IAAIC,yBAAeN,mBAOzCO,iBAAkB,uGAMlBC,YAAa,0FAwHbC,SACAA,OAAOC,SAAWD,OAAOC,UAAY,GAGrCD,OAAOC,SAASC,OAASF,OAAOC,SAASC,QAAU,GAGnDF,OAAOC,SAASC,OAAOC,gBAGvBH,OAAOC,SAASG,QAAU,GAAGC,OAhCjC,SAAuBC,EAAMC,OACrBC,GAAW,EACfF,EAAKG,WAAW,SAASC,UACrBF,EAAYd,EAAMI,iBAAiBa,KAAKD,MAGpCA,EA1FZ,SAA4BA,WAapBE,EACAC,EAbEC,EAAmBJ,EAAQK,MAAMrB,EAAMC,aAAe,GACtDqB,EAAmBF,EAAeG,IAAI,SAACC,EAAMC,OACzCC,oBAAqB7B,uBAA+B4B,oBAK1DT,EAAUA,EAAQW,QAAQH,EAAME,GAEzBA,IAOyD,QAA5DR,EAAkBlB,EAAMI,iBAAiBwB,KAAKZ,KAAoB,KAClEjB,EAAwBmB,EAAgB,GACxCW,EAAwB,GACxBC,EAAwB,GAEtBC,EAAW/B,EAAMK,YAAYY,KAAKlB,GAClCiC,EAAmBd,EAAgB,GACnCe,EAAmBf,EAAgB,GACnCgB,EAAmBhB,EAAgB,MAErCa,MACAF,oBAAgChC,0BAAkC,CAACC,EAAWC,YAAYoC,KAAK,kBAC/FL,cAA2BE,qBAAwBnC,oBAGY,QAAvDsB,EAAcnB,EAAMK,YAAYuB,KAAK7B,KAAwB,KAC3DqC,EAAejB,EAAW,GAAIkB,OAAOC,cACrCC,EAAgBpB,EAAW,GAAIkB,OAErCtC,EAAaA,EAAW4B,QAAQR,EAAW,GAAI,aACtCa,qBAAwBnC,0BAAkC,CAACC,EAAWC,WAAYqC,GAAWD,KAAK,gCAChGH,UAAmBO,iBACnBP,qBAAwBnC,qBACjCsC,KAAK,KAMfpC,GADAA,EAAaA,EAAW4B,QAAQM,EAAiBJ,IACzBF,QAAQO,EAAeJ,GAC/Cd,EAAUA,EAAQW,QAAQT,EAAgB,GAAInB,UAKlDuB,EAAiBkB,QAAQ,SAAChB,EAAMC,GAC5BT,EAAUA,EAAQW,QAAQH,EAAMJ,EAAeK,MAG5CT,EAkCWyB,CAAmBzB,IAG1BA,IAGXJ,EAAK8B,UAAU,SAASC,EAAMC,GACtB9B,IACA6B,EAhCZ,SAA4BA,WACpBE,EAEiE,QAA7DA,EAAkB7C,EAAME,qBAAqB0B,KAAKe,KAAiB,KACjEG,EAAiBD,EAAgB,GACjCE,EAAiBF,EAAgB,IAAM,GAE7CF,EAAOA,EAAKhB,QAAQmB,EAAYC,UAG7BJ,EAsBQK,CAAmBL,IAG9BC,EAAKD,MAiBJrC,OAAOC,SAASG,SAAW"}